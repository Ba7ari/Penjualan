'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsPenjualan"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsPenjualan
    Inherits System.Data.DataSet
    
    Private tablefaktur As fakturDataTable
    
    Private tablesj As sjDataTable
    
    Private tablekwitansi As kwitansiDataTable
    
    Private tablepenjualanpesan As penjualanpesanDataTable
    
    Private tablepelanggan As pelangganDataTable
    
    Private tablebarang As barangDataTable
    
    Private tablepengiriman As pengirimanDataTable
    
    Private tabletopten As toptenDataTable
    
    Private tablejurnalumum As jurnalumumDataTable
    
    Private tablenotakontan As notakontanDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("faktur")) Is Nothing) Then
                MyBase.Tables.Add(New fakturDataTable(ds.Tables("faktur")))
            End If
            If (Not (ds.Tables("sj")) Is Nothing) Then
                MyBase.Tables.Add(New sjDataTable(ds.Tables("sj")))
            End If
            If (Not (ds.Tables("kwitansi")) Is Nothing) Then
                MyBase.Tables.Add(New kwitansiDataTable(ds.Tables("kwitansi")))
            End If
            If (Not (ds.Tables("penjualanpesan")) Is Nothing) Then
                MyBase.Tables.Add(New penjualanpesanDataTable(ds.Tables("penjualanpesan")))
            End If
            If (Not (ds.Tables("pelanggan")) Is Nothing) Then
                MyBase.Tables.Add(New pelangganDataTable(ds.Tables("pelanggan")))
            End If
            If (Not (ds.Tables("barang")) Is Nothing) Then
                MyBase.Tables.Add(New barangDataTable(ds.Tables("barang")))
            End If
            If (Not (ds.Tables("pengiriman")) Is Nothing) Then
                MyBase.Tables.Add(New pengirimanDataTable(ds.Tables("pengiriman")))
            End If
            If (Not (ds.Tables("topten")) Is Nothing) Then
                MyBase.Tables.Add(New toptenDataTable(ds.Tables("topten")))
            End If
            If (Not (ds.Tables("jurnalumum")) Is Nothing) Then
                MyBase.Tables.Add(New jurnalumumDataTable(ds.Tables("jurnalumum")))
            End If
            If (Not (ds.Tables("notakontan")) Is Nothing) Then
                MyBase.Tables.Add(New notakontanDataTable(ds.Tables("notakontan")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property faktur() As fakturDataTable
        Get
            Return Me.tablefaktur
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sj() As sjDataTable
        Get
            Return Me.tablesj
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property kwitansi() As kwitansiDataTable
        Get
            Return Me.tablekwitansi
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property penjualanpesan() As penjualanpesanDataTable
        Get
            Return Me.tablepenjualanpesan
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pelanggan() As pelangganDataTable
        Get
            Return Me.tablepelanggan
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property barang() As barangDataTable
        Get
            Return Me.tablebarang
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property pengiriman() As pengirimanDataTable
        Get
            Return Me.tablepengiriman
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property topten() As toptenDataTable
        Get
            Return Me.tabletopten
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property jurnalumum() As jurnalumumDataTable
        Get
            Return Me.tablejurnalumum
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property notakontan() As notakontanDataTable
        Get
            Return Me.tablenotakontan
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsPenjualan = CType(MyBase.Clone,dsPenjualan)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("faktur")) Is Nothing) Then
                MyBase.Tables.Add(New fakturDataTable(ds.Tables("faktur")))
            End If
            If (Not (ds.Tables("sj")) Is Nothing) Then
                MyBase.Tables.Add(New sjDataTable(ds.Tables("sj")))
            End If
            If (Not (ds.Tables("kwitansi")) Is Nothing) Then
                MyBase.Tables.Add(New kwitansiDataTable(ds.Tables("kwitansi")))
            End If
            If (Not (ds.Tables("penjualanpesan")) Is Nothing) Then
                MyBase.Tables.Add(New penjualanpesanDataTable(ds.Tables("penjualanpesan")))
            End If
            If (Not (ds.Tables("pelanggan")) Is Nothing) Then
                MyBase.Tables.Add(New pelangganDataTable(ds.Tables("pelanggan")))
            End If
            If (Not (ds.Tables("barang")) Is Nothing) Then
                MyBase.Tables.Add(New barangDataTable(ds.Tables("barang")))
            End If
            If (Not (ds.Tables("pengiriman")) Is Nothing) Then
                MyBase.Tables.Add(New pengirimanDataTable(ds.Tables("pengiriman")))
            End If
            If (Not (ds.Tables("topten")) Is Nothing) Then
                MyBase.Tables.Add(New toptenDataTable(ds.Tables("topten")))
            End If
            If (Not (ds.Tables("jurnalumum")) Is Nothing) Then
                MyBase.Tables.Add(New jurnalumumDataTable(ds.Tables("jurnalumum")))
            End If
            If (Not (ds.Tables("notakontan")) Is Nothing) Then
                MyBase.Tables.Add(New notakontanDataTable(ds.Tables("notakontan")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablefaktur = CType(MyBase.Tables("faktur"),fakturDataTable)
        If (initTable = true) Then
            If (Not (Me.tablefaktur) Is Nothing) Then
                Me.tablefaktur.InitVars
            End If
        End If
        Me.tablesj = CType(MyBase.Tables("sj"),sjDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesj) Is Nothing) Then
                Me.tablesj.InitVars
            End If
        End If
        Me.tablekwitansi = CType(MyBase.Tables("kwitansi"),kwitansiDataTable)
        If (initTable = true) Then
            If (Not (Me.tablekwitansi) Is Nothing) Then
                Me.tablekwitansi.InitVars
            End If
        End If
        Me.tablepenjualanpesan = CType(MyBase.Tables("penjualanpesan"),penjualanpesanDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepenjualanpesan) Is Nothing) Then
                Me.tablepenjualanpesan.InitVars
            End If
        End If
        Me.tablepelanggan = CType(MyBase.Tables("pelanggan"),pelangganDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepelanggan) Is Nothing) Then
                Me.tablepelanggan.InitVars
            End If
        End If
        Me.tablebarang = CType(MyBase.Tables("barang"),barangDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebarang) Is Nothing) Then
                Me.tablebarang.InitVars
            End If
        End If
        Me.tablepengiriman = CType(MyBase.Tables("pengiriman"),pengirimanDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepengiriman) Is Nothing) Then
                Me.tablepengiriman.InitVars
            End If
        End If
        Me.tabletopten = CType(MyBase.Tables("topten"),toptenDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletopten) Is Nothing) Then
                Me.tabletopten.InitVars
            End If
        End If
        Me.tablejurnalumum = CType(MyBase.Tables("jurnalumum"),jurnalumumDataTable)
        If (initTable = true) Then
            If (Not (Me.tablejurnalumum) Is Nothing) Then
                Me.tablejurnalumum.InitVars
            End If
        End If
        Me.tablenotakontan = CType(MyBase.Tables("notakontan"),notakontanDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenotakontan) Is Nothing) Then
                Me.tablenotakontan.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsPenjualan"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablefaktur = New fakturDataTable
        MyBase.Tables.Add(Me.tablefaktur)
        Me.tablesj = New sjDataTable
        MyBase.Tables.Add(Me.tablesj)
        Me.tablekwitansi = New kwitansiDataTable
        MyBase.Tables.Add(Me.tablekwitansi)
        Me.tablepenjualanpesan = New penjualanpesanDataTable
        MyBase.Tables.Add(Me.tablepenjualanpesan)
        Me.tablepelanggan = New pelangganDataTable
        MyBase.Tables.Add(Me.tablepelanggan)
        Me.tablebarang = New barangDataTable
        MyBase.Tables.Add(Me.tablebarang)
        Me.tablepengiriman = New pengirimanDataTable
        MyBase.Tables.Add(Me.tablepengiriman)
        Me.tabletopten = New toptenDataTable
        MyBase.Tables.Add(Me.tabletopten)
        Me.tablejurnalumum = New jurnalumumDataTable
        MyBase.Tables.Add(Me.tablejurnalumum)
        Me.tablenotakontan = New notakontanDataTable
        MyBase.Tables.Add(Me.tablenotakontan)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializefaktur() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesj() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializekwitansi() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepenjualanpesan() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepelanggan() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebarang() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializepengiriman() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetopten() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializejurnalumum() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializenotakontan() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsPenjualan = New dsPenjualan
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub fakturRowChangeEventHandler(ByVal sender As Object, ByVal e As fakturRowChangeEvent)
    
    Public Delegate Sub sjRowChangeEventHandler(ByVal sender As Object, ByVal e As sjRowChangeEvent)
    
    Public Delegate Sub kwitansiRowChangeEventHandler(ByVal sender As Object, ByVal e As kwitansiRowChangeEvent)
    
    Public Delegate Sub penjualanpesanRowChangeEventHandler(ByVal sender As Object, ByVal e As penjualanpesanRowChangeEvent)
    
    Public Delegate Sub pelangganRowChangeEventHandler(ByVal sender As Object, ByVal e As pelangganRowChangeEvent)
    
    Public Delegate Sub barangRowChangeEventHandler(ByVal sender As Object, ByVal e As barangRowChangeEvent)
    
    Public Delegate Sub pengirimanRowChangeEventHandler(ByVal sender As Object, ByVal e As pengirimanRowChangeEvent)
    
    Public Delegate Sub toptenRowChangeEventHandler(ByVal sender As Object, ByVal e As toptenRowChangeEvent)
    
    Public Delegate Sub jurnalumumRowChangeEventHandler(ByVal sender As Object, ByVal e As jurnalumumRowChangeEvent)
    
    Public Delegate Sub notakontanRowChangeEventHandler(ByVal sender As Object, ByVal e As notakontanRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class fakturDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnofaktur As System.Data.DataColumn
        
        Private columntglfaktur As System.Data.DataColumn
        
        Private columnnosp As System.Data.DataColumn
        
        Private columntglsp As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnalamat As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnhrgpsn As System.Data.DataColumn
        
        Private columnjmlpsn As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "faktur"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nofakturColumn() As System.Data.DataColumn
            Get
                Return Me.columnnofaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglfakturColumn() As System.Data.DataColumn
            Get
                Return Me.columntglfaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nospColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglspColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alamatColumn() As System.Data.DataColumn
            Get
                Return Me.columnalamat
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hrgpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnhrgpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As fakturRow
            Get
                Return CType(Me.Rows(index),fakturRow)
            End Get
        End Property
        
        Public Event fakturRowChanging As fakturRowChangeEventHandler
        
        Public Event fakturRowChanged As fakturRowChangeEventHandler
        
        Public Event fakturRowDeleting As fakturRowChangeEventHandler
        
        Public Event fakturRowDeleted As fakturRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddfakturRow(ByVal row As fakturRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddfakturRow(ByVal nofaktur As String, ByVal tglfaktur As Date, ByVal nosp As String, ByVal tglsp As Date, ByVal nmplg As String, ByVal alamat As String, ByVal nmbrg As String, ByVal hrgpsn As Integer, ByVal jmlpsn As Integer) As fakturRow
            Dim rowfakturRow As fakturRow = CType(Me.NewRow,fakturRow)
            rowfakturRow.ItemArray = New Object() {nofaktur, tglfaktur, nosp, tglsp, nmplg, alamat, nmbrg, hrgpsn, jmlpsn}
            Me.Rows.Add(rowfakturRow)
            Return rowfakturRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As fakturDataTable = CType(MyBase.Clone,fakturDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New fakturDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnofaktur = MyBase.Columns("nofaktur")
            Me.columntglfaktur = MyBase.Columns("tglfaktur")
            Me.columnnosp = MyBase.Columns("nosp")
            Me.columntglsp = MyBase.Columns("tglsp")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnalamat = MyBase.Columns("alamat")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnhrgpsn = MyBase.Columns("hrgpsn")
            Me.columnjmlpsn = MyBase.Columns("jmlpsn")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnofaktur = New System.Data.DataColumn("nofaktur", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnofaktur)
            Me.columntglfaktur = New System.Data.DataColumn("tglfaktur", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglfaktur)
            Me.columnnosp = New System.Data.DataColumn("nosp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosp)
            Me.columntglsp = New System.Data.DataColumn("tglsp", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsp)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnalamat = New System.Data.DataColumn("alamat", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalamat)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnhrgpsn = New System.Data.DataColumn("hrgpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhrgpsn)
            Me.columnjmlpsn = New System.Data.DataColumn("jmlpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlpsn)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewfakturRow() As fakturRow
            Return CType(Me.NewRow,fakturRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New fakturRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(fakturRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.fakturRowChangedEvent) Is Nothing) Then
                RaiseEvent fakturRowChanged(Me, New fakturRowChangeEvent(CType(e.Row,fakturRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.fakturRowChangingEvent) Is Nothing) Then
                RaiseEvent fakturRowChanging(Me, New fakturRowChangeEvent(CType(e.Row,fakturRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.fakturRowDeletedEvent) Is Nothing) Then
                RaiseEvent fakturRowDeleted(Me, New fakturRowChangeEvent(CType(e.Row,fakturRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.fakturRowDeletingEvent) Is Nothing) Then
                RaiseEvent fakturRowDeleting(Me, New fakturRowChangeEvent(CType(e.Row,fakturRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovefakturRow(ByVal row As fakturRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "fakturDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sjDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnosj As System.Data.DataColumn
        
        Private columntglsj As System.Data.DataColumn
        
        Private columnnopol As System.Data.DataColumn
        
        Private columnnofaktur As System.Data.DataColumn
        
        Private columntglfaktur As System.Data.DataColumn
        
        Private columnnosp As System.Data.DataColumn
        
        Private columntglsp As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnalamat As System.Data.DataColumn
        
        Private columntelp As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnjmlkirim As System.Data.DataColumn
        
        Private columnketerangan As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sj"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nosjColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosj
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglsjColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsj
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nopolColumn() As System.Data.DataColumn
            Get
                Return Me.columnnopol
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nofakturColumn() As System.Data.DataColumn
            Get
                Return Me.columnnofaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglfakturColumn() As System.Data.DataColumn
            Get
                Return Me.columntglfaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nospColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglspColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alamatColumn() As System.Data.DataColumn
            Get
                Return Me.columnalamat
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telpColumn() As System.Data.DataColumn
            Get
                Return Me.columntelp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlkirimColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlkirim
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property keteranganColumn() As System.Data.DataColumn
            Get
                Return Me.columnketerangan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sjRow
            Get
                Return CType(Me.Rows(index),sjRow)
            End Get
        End Property
        
        Public Event sjRowChanging As sjRowChangeEventHandler
        
        Public Event sjRowChanged As sjRowChangeEventHandler
        
        Public Event sjRowDeleting As sjRowChangeEventHandler
        
        Public Event sjRowDeleted As sjRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddsjRow(ByVal row As sjRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddsjRow(ByVal nosj As String, ByVal tglsj As Date, ByVal nopol As String, ByVal nofaktur As String, ByVal tglfaktur As Date, ByVal nosp As String, ByVal tglsp As Date, ByVal nmplg As String, ByVal alamat As String, ByVal telp As String, ByVal nmbrg As String, ByVal jmlkirim As Integer, ByVal keterangan As String) As sjRow
            Dim rowsjRow As sjRow = CType(Me.NewRow,sjRow)
            rowsjRow.ItemArray = New Object() {nosj, tglsj, nopol, nofaktur, tglfaktur, nosp, tglsp, nmplg, alamat, telp, nmbrg, jmlkirim, keterangan}
            Me.Rows.Add(rowsjRow)
            Return rowsjRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As sjDataTable = CType(MyBase.Clone,sjDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New sjDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnosj = MyBase.Columns("nosj")
            Me.columntglsj = MyBase.Columns("tglsj")
            Me.columnnopol = MyBase.Columns("nopol")
            Me.columnnofaktur = MyBase.Columns("nofaktur")
            Me.columntglfaktur = MyBase.Columns("tglfaktur")
            Me.columnnosp = MyBase.Columns("nosp")
            Me.columntglsp = MyBase.Columns("tglsp")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnalamat = MyBase.Columns("alamat")
            Me.columntelp = MyBase.Columns("telp")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnjmlkirim = MyBase.Columns("jmlkirim")
            Me.columnketerangan = MyBase.Columns("keterangan")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnosj = New System.Data.DataColumn("nosj", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosj)
            Me.columntglsj = New System.Data.DataColumn("tglsj", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsj)
            Me.columnnopol = New System.Data.DataColumn("nopol", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnopol)
            Me.columnnofaktur = New System.Data.DataColumn("nofaktur", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnofaktur)
            Me.columntglfaktur = New System.Data.DataColumn("tglfaktur", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglfaktur)
            Me.columnnosp = New System.Data.DataColumn("nosp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosp)
            Me.columntglsp = New System.Data.DataColumn("tglsp", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsp)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnalamat = New System.Data.DataColumn("alamat", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalamat)
            Me.columntelp = New System.Data.DataColumn("telp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelp)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnjmlkirim = New System.Data.DataColumn("jmlkirim", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlkirim)
            Me.columnketerangan = New System.Data.DataColumn("keterangan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnketerangan)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewsjRow() As sjRow
            Return CType(Me.NewRow,sjRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New sjRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sjRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sjRowChangedEvent) Is Nothing) Then
                RaiseEvent sjRowChanged(Me, New sjRowChangeEvent(CType(e.Row,sjRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sjRowChangingEvent) Is Nothing) Then
                RaiseEvent sjRowChanging(Me, New sjRowChangeEvent(CType(e.Row,sjRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sjRowDeletedEvent) Is Nothing) Then
                RaiseEvent sjRowDeleted(Me, New sjRowChangeEvent(CType(e.Row,sjRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sjRowDeletingEvent) Is Nothing) Then
                RaiseEvent sjRowDeleting(Me, New sjRowChangeEvent(CType(e.Row,sjRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovesjRow(ByVal row As sjRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sjDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class kwitansiDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnokwt As System.Data.DataColumn
        
        Private columntglkwt As System.Data.DataColumn
        
        Private columnnofaktur As System.Data.DataColumn
        
        Private columntglfaktur As System.Data.DataColumn
        
        Private columnnosp As System.Data.DataColumn
        
        Private columntglsp As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnalamat As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnhrgpsn As System.Data.DataColumn
        
        Private columnjmlpsn As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "kwitansi"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nokwtColumn() As System.Data.DataColumn
            Get
                Return Me.columnnokwt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglkwtColumn() As System.Data.DataColumn
            Get
                Return Me.columntglkwt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nofakturColumn() As System.Data.DataColumn
            Get
                Return Me.columnnofaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglfakturColumn() As System.Data.DataColumn
            Get
                Return Me.columntglfaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nospColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglspColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alamatColumn() As System.Data.DataColumn
            Get
                Return Me.columnalamat
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hrgpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnhrgpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As kwitansiRow
            Get
                Return CType(Me.Rows(index),kwitansiRow)
            End Get
        End Property
        
        Public Event kwitansiRowChanging As kwitansiRowChangeEventHandler
        
        Public Event kwitansiRowChanged As kwitansiRowChangeEventHandler
        
        Public Event kwitansiRowDeleting As kwitansiRowChangeEventHandler
        
        Public Event kwitansiRowDeleted As kwitansiRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddkwitansiRow(ByVal row As kwitansiRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddkwitansiRow(ByVal nokwt As String, ByVal tglkwt As Date, ByVal nofaktur As String, ByVal tglfaktur As Date, ByVal nosp As String, ByVal tglsp As Date, ByVal nmplg As String, ByVal alamat As String, ByVal nmbrg As String, ByVal hrgpsn As Integer, ByVal jmlpsn As Integer) As kwitansiRow
            Dim rowkwitansiRow As kwitansiRow = CType(Me.NewRow,kwitansiRow)
            rowkwitansiRow.ItemArray = New Object() {nokwt, tglkwt, nofaktur, tglfaktur, nosp, tglsp, nmplg, alamat, nmbrg, hrgpsn, jmlpsn}
            Me.Rows.Add(rowkwitansiRow)
            Return rowkwitansiRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As kwitansiDataTable = CType(MyBase.Clone,kwitansiDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New kwitansiDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnokwt = MyBase.Columns("nokwt")
            Me.columntglkwt = MyBase.Columns("tglkwt")
            Me.columnnofaktur = MyBase.Columns("nofaktur")
            Me.columntglfaktur = MyBase.Columns("tglfaktur")
            Me.columnnosp = MyBase.Columns("nosp")
            Me.columntglsp = MyBase.Columns("tglsp")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnalamat = MyBase.Columns("alamat")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnhrgpsn = MyBase.Columns("hrgpsn")
            Me.columnjmlpsn = MyBase.Columns("jmlpsn")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnokwt = New System.Data.DataColumn("nokwt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnokwt)
            Me.columntglkwt = New System.Data.DataColumn("tglkwt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglkwt)
            Me.columnnofaktur = New System.Data.DataColumn("nofaktur", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnofaktur)
            Me.columntglfaktur = New System.Data.DataColumn("tglfaktur", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglfaktur)
            Me.columnnosp = New System.Data.DataColumn("nosp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosp)
            Me.columntglsp = New System.Data.DataColumn("tglsp", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsp)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnalamat = New System.Data.DataColumn("alamat", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalamat)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnhrgpsn = New System.Data.DataColumn("hrgpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhrgpsn)
            Me.columnjmlpsn = New System.Data.DataColumn("jmlpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlpsn)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewkwitansiRow() As kwitansiRow
            Return CType(Me.NewRow,kwitansiRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New kwitansiRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(kwitansiRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.kwitansiRowChangedEvent) Is Nothing) Then
                RaiseEvent kwitansiRowChanged(Me, New kwitansiRowChangeEvent(CType(e.Row,kwitansiRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.kwitansiRowChangingEvent) Is Nothing) Then
                RaiseEvent kwitansiRowChanging(Me, New kwitansiRowChangeEvent(CType(e.Row,kwitansiRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.kwitansiRowDeletedEvent) Is Nothing) Then
                RaiseEvent kwitansiRowDeleted(Me, New kwitansiRowChangeEvent(CType(e.Row,kwitansiRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.kwitansiRowDeletingEvent) Is Nothing) Then
                RaiseEvent kwitansiRowDeleting(Me, New kwitansiRowChangeEvent(CType(e.Row,kwitansiRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovekwitansiRow(ByVal row As kwitansiRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "kwitansiDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class penjualanpesanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnosp As System.Data.DataColumn
        
        Private columntglsp As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnhrgpsn As System.Data.DataColumn
        
        Private columnjmlpsn As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "penjualanpesan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nospColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglspColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hrgpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnhrgpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlpsnColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlpsn
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As penjualanpesanRow
            Get
                Return CType(Me.Rows(index),penjualanpesanRow)
            End Get
        End Property
        
        Public Event penjualanpesanRowChanging As penjualanpesanRowChangeEventHandler
        
        Public Event penjualanpesanRowChanged As penjualanpesanRowChangeEventHandler
        
        Public Event penjualanpesanRowDeleting As penjualanpesanRowChangeEventHandler
        
        Public Event penjualanpesanRowDeleted As penjualanpesanRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpenjualanpesanRow(ByVal row As penjualanpesanRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpenjualanpesanRow(ByVal nosp As String, ByVal tglsp As Date, ByVal nmplg As String, ByVal nmbrg As String, ByVal hrgpsn As Integer, ByVal jmlpsn As Integer) As penjualanpesanRow
            Dim rowpenjualanpesanRow As penjualanpesanRow = CType(Me.NewRow,penjualanpesanRow)
            rowpenjualanpesanRow.ItemArray = New Object() {nosp, tglsp, nmplg, nmbrg, hrgpsn, jmlpsn}
            Me.Rows.Add(rowpenjualanpesanRow)
            Return rowpenjualanpesanRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As penjualanpesanDataTable = CType(MyBase.Clone,penjualanpesanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New penjualanpesanDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnosp = MyBase.Columns("nosp")
            Me.columntglsp = MyBase.Columns("tglsp")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnhrgpsn = MyBase.Columns("hrgpsn")
            Me.columnjmlpsn = MyBase.Columns("jmlpsn")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnosp = New System.Data.DataColumn("nosp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosp)
            Me.columntglsp = New System.Data.DataColumn("tglsp", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsp)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnhrgpsn = New System.Data.DataColumn("hrgpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhrgpsn)
            Me.columnjmlpsn = New System.Data.DataColumn("jmlpsn", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlpsn)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpenjualanpesanRow() As penjualanpesanRow
            Return CType(Me.NewRow,penjualanpesanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New penjualanpesanRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(penjualanpesanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.penjualanpesanRowChangedEvent) Is Nothing) Then
                RaiseEvent penjualanpesanRowChanged(Me, New penjualanpesanRowChangeEvent(CType(e.Row,penjualanpesanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.penjualanpesanRowChangingEvent) Is Nothing) Then
                RaiseEvent penjualanpesanRowChanging(Me, New penjualanpesanRowChangeEvent(CType(e.Row,penjualanpesanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.penjualanpesanRowDeletedEvent) Is Nothing) Then
                RaiseEvent penjualanpesanRowDeleted(Me, New penjualanpesanRowChangeEvent(CType(e.Row,penjualanpesanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.penjualanpesanRowDeletingEvent) Is Nothing) Then
                RaiseEvent penjualanpesanRowDeleting(Me, New penjualanpesanRowChangeEvent(CType(e.Row,penjualanpesanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepenjualanpesanRow(ByVal row As penjualanpesanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "penjualanpesanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pelangganDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkdplg As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnalamat As System.Data.DataColumn
        
        Private columntelp As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pelanggan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kdplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnkdplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property alamatColumn() As System.Data.DataColumn
            Get
                Return Me.columnalamat
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telpColumn() As System.Data.DataColumn
            Get
                Return Me.columntelp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pelangganRow
            Get
                Return CType(Me.Rows(index),pelangganRow)
            End Get
        End Property
        
        Public Event pelangganRowChanging As pelangganRowChangeEventHandler
        
        Public Event pelangganRowChanged As pelangganRowChangeEventHandler
        
        Public Event pelangganRowDeleting As pelangganRowChangeEventHandler
        
        Public Event pelangganRowDeleted As pelangganRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpelangganRow(ByVal row As pelangganRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpelangganRow(ByVal kdplg As String, ByVal nmplg As String, ByVal alamat As String, ByVal telp As String) As pelangganRow
            Dim rowpelangganRow As pelangganRow = CType(Me.NewRow,pelangganRow)
            rowpelangganRow.ItemArray = New Object() {kdplg, nmplg, alamat, telp}
            Me.Rows.Add(rowpelangganRow)
            Return rowpelangganRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pelangganDataTable = CType(MyBase.Clone,pelangganDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pelangganDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkdplg = MyBase.Columns("kdplg")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnalamat = MyBase.Columns("alamat")
            Me.columntelp = MyBase.Columns("telp")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkdplg = New System.Data.DataColumn("kdplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkdplg)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnalamat = New System.Data.DataColumn("alamat", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalamat)
            Me.columntelp = New System.Data.DataColumn("telp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelp)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpelangganRow() As pelangganRow
            Return CType(Me.NewRow,pelangganRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pelangganRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pelangganRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pelangganRowChangedEvent) Is Nothing) Then
                RaiseEvent pelangganRowChanged(Me, New pelangganRowChangeEvent(CType(e.Row,pelangganRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pelangganRowChangingEvent) Is Nothing) Then
                RaiseEvent pelangganRowChanging(Me, New pelangganRowChangeEvent(CType(e.Row,pelangganRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pelangganRowDeletedEvent) Is Nothing) Then
                RaiseEvent pelangganRowDeleted(Me, New pelangganRowChangeEvent(CType(e.Row,pelangganRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pelangganRowDeletingEvent) Is Nothing) Then
                RaiseEvent pelangganRowDeleting(Me, New pelangganRowChangeEvent(CType(e.Row,pelangganRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepelangganRow(ByVal row As pelangganRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pelangganDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class barangDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkdbrg As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnsatuan As System.Data.DataColumn
        
        Private columnharga As System.Data.DataColumn
        
        Private columnstok As System.Data.DataColumn
        
        Private columnkdsub As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "barang"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kdbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnkdbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satuanColumn() As System.Data.DataColumn
            Get
                Return Me.columnsatuan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hargaColumn() As System.Data.DataColumn
            Get
                Return Me.columnharga
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stokColumn() As System.Data.DataColumn
            Get
                Return Me.columnstok
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kdsubColumn() As System.Data.DataColumn
            Get
                Return Me.columnkdsub
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As barangRow
            Get
                Return CType(Me.Rows(index),barangRow)
            End Get
        End Property
        
        Public Event barangRowChanging As barangRowChangeEventHandler
        
        Public Event barangRowChanged As barangRowChangeEventHandler
        
        Public Event barangRowDeleting As barangRowChangeEventHandler
        
        Public Event barangRowDeleted As barangRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbarangRow(ByVal row As barangRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbarangRow(ByVal kdbrg As String, ByVal nmbrg As String, ByVal satuan As String, ByVal harga As Integer, ByVal stok As Integer, ByVal kdsub As String) As barangRow
            Dim rowbarangRow As barangRow = CType(Me.NewRow,barangRow)
            rowbarangRow.ItemArray = New Object() {kdbrg, nmbrg, satuan, harga, stok, kdsub}
            Me.Rows.Add(rowbarangRow)
            Return rowbarangRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As barangDataTable = CType(MyBase.Clone,barangDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New barangDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkdbrg = MyBase.Columns("kdbrg")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnsatuan = MyBase.Columns("satuan")
            Me.columnharga = MyBase.Columns("harga")
            Me.columnstok = MyBase.Columns("stok")
            Me.columnkdsub = MyBase.Columns("kdsub")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkdbrg = New System.Data.DataColumn("kdbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkdbrg)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnsatuan = New System.Data.DataColumn("satuan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatuan)
            Me.columnharga = New System.Data.DataColumn("harga", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnharga)
            Me.columnstok = New System.Data.DataColumn("stok", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstok)
            Me.columnkdsub = New System.Data.DataColumn("kdsub", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkdsub)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbarangRow() As barangRow
            Return CType(Me.NewRow,barangRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New barangRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(barangRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.barangRowChangedEvent) Is Nothing) Then
                RaiseEvent barangRowChanged(Me, New barangRowChangeEvent(CType(e.Row,barangRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.barangRowChangingEvent) Is Nothing) Then
                RaiseEvent barangRowChanging(Me, New barangRowChangeEvent(CType(e.Row,barangRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.barangRowDeletedEvent) Is Nothing) Then
                RaiseEvent barangRowDeleted(Me, New barangRowChangeEvent(CType(e.Row,barangRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.barangRowDeletingEvent) Is Nothing) Then
                RaiseEvent barangRowDeleting(Me, New barangRowChangeEvent(CType(e.Row,barangRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebarangRow(ByVal row As barangRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "barangDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class pengirimanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnosj As System.Data.DataColumn
        
        Private columntglsj As System.Data.DataColumn
        
        Private columnnofaktur As System.Data.DataColumn
        
        Private columntglfaktur As System.Data.DataColumn
        
        Private columnnosp As System.Data.DataColumn
        
        Private columntglsp As System.Data.DataColumn
        
        Private columnnmplg As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnjmlkirim As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "pengiriman"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nosjColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosj
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglsjColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsj
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nofakturColumn() As System.Data.DataColumn
            Get
                Return Me.columnnofaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglfakturColumn() As System.Data.DataColumn
            Get
                Return Me.columntglfaktur
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nospColumn() As System.Data.DataColumn
            Get
                Return Me.columnnosp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglspColumn() As System.Data.DataColumn
            Get
                Return Me.columntglsp
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmplgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmplg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlkirimColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlkirim
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As pengirimanRow
            Get
                Return CType(Me.Rows(index),pengirimanRow)
            End Get
        End Property
        
        Public Event pengirimanRowChanging As pengirimanRowChangeEventHandler
        
        Public Event pengirimanRowChanged As pengirimanRowChangeEventHandler
        
        Public Event pengirimanRowDeleting As pengirimanRowChangeEventHandler
        
        Public Event pengirimanRowDeleted As pengirimanRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddpengirimanRow(ByVal row As pengirimanRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddpengirimanRow(ByVal nosj As String, ByVal tglsj As Date, ByVal nofaktur As String, ByVal tglfaktur As Date, ByVal nosp As String, ByVal tglsp As Date, ByVal nmplg As String, ByVal nmbrg As String, ByVal jmlkirim As Integer) As pengirimanRow
            Dim rowpengirimanRow As pengirimanRow = CType(Me.NewRow,pengirimanRow)
            rowpengirimanRow.ItemArray = New Object() {nosj, tglsj, nofaktur, tglfaktur, nosp, tglsp, nmplg, nmbrg, jmlkirim}
            Me.Rows.Add(rowpengirimanRow)
            Return rowpengirimanRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pengirimanDataTable = CType(MyBase.Clone,pengirimanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pengirimanDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnosj = MyBase.Columns("nosj")
            Me.columntglsj = MyBase.Columns("tglsj")
            Me.columnnofaktur = MyBase.Columns("nofaktur")
            Me.columntglfaktur = MyBase.Columns("tglfaktur")
            Me.columnnosp = MyBase.Columns("nosp")
            Me.columntglsp = MyBase.Columns("tglsp")
            Me.columnnmplg = MyBase.Columns("nmplg")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnjmlkirim = MyBase.Columns("jmlkirim")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnosj = New System.Data.DataColumn("nosj", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosj)
            Me.columntglsj = New System.Data.DataColumn("tglsj", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsj)
            Me.columnnofaktur = New System.Data.DataColumn("nofaktur", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnofaktur)
            Me.columntglfaktur = New System.Data.DataColumn("tglfaktur", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglfaktur)
            Me.columnnosp = New System.Data.DataColumn("nosp", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnosp)
            Me.columntglsp = New System.Data.DataColumn("tglsp", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglsp)
            Me.columnnmplg = New System.Data.DataColumn("nmplg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmplg)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnjmlkirim = New System.Data.DataColumn("jmlkirim", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlkirim)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewpengirimanRow() As pengirimanRow
            Return CType(Me.NewRow,pengirimanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pengirimanRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pengirimanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pengirimanRowChangedEvent) Is Nothing) Then
                RaiseEvent pengirimanRowChanged(Me, New pengirimanRowChangeEvent(CType(e.Row,pengirimanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pengirimanRowChangingEvent) Is Nothing) Then
                RaiseEvent pengirimanRowChanging(Me, New pengirimanRowChangeEvent(CType(e.Row,pengirimanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pengirimanRowDeletedEvent) Is Nothing) Then
                RaiseEvent pengirimanRowDeleted(Me, New pengirimanRowChangeEvent(CType(e.Row,pengirimanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pengirimanRowDeletingEvent) Is Nothing) Then
                RaiseEvent pengirimanRowDeleting(Me, New pengirimanRowChangeEvent(CType(e.Row,pengirimanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovepengirimanRow(ByVal row As pengirimanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pengirimanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class toptenDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnkdbrg As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnsatuan As System.Data.DataColumn
        
        Private columnnmsub As System.Data.DataColumn
        
        Private columnnmkategori As System.Data.DataColumn
        
        Private columnjmljual As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "topten"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kdbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnkdbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property satuanColumn() As System.Data.DataColumn
            Get
                Return Me.columnsatuan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmsubColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmsub
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmkategoriColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmkategori
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmljualColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmljual
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As toptenRow
            Get
                Return CType(Me.Rows(index),toptenRow)
            End Get
        End Property
        
        Public Event toptenRowChanging As toptenRowChangeEventHandler
        
        Public Event toptenRowChanged As toptenRowChangeEventHandler
        
        Public Event toptenRowDeleting As toptenRowChangeEventHandler
        
        Public Event toptenRowDeleted As toptenRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtoptenRow(ByVal row As toptenRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtoptenRow(ByVal kdbrg As String, ByVal nmbrg As String, ByVal satuan As String, ByVal nmsub As String, ByVal nmkategori As String, ByVal jmljual As Double) As toptenRow
            Dim rowtoptenRow As toptenRow = CType(Me.NewRow,toptenRow)
            rowtoptenRow.ItemArray = New Object() {kdbrg, nmbrg, satuan, nmsub, nmkategori, jmljual}
            Me.Rows.Add(rowtoptenRow)
            Return rowtoptenRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As toptenDataTable = CType(MyBase.Clone,toptenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New toptenDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnkdbrg = MyBase.Columns("kdbrg")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnsatuan = MyBase.Columns("satuan")
            Me.columnnmsub = MyBase.Columns("nmsub")
            Me.columnnmkategori = MyBase.Columns("nmkategori")
            Me.columnjmljual = MyBase.Columns("jmljual")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnkdbrg = New System.Data.DataColumn("kdbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkdbrg)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnsatuan = New System.Data.DataColumn("satuan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsatuan)
            Me.columnnmsub = New System.Data.DataColumn("nmsub", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmsub)
            Me.columnnmkategori = New System.Data.DataColumn("nmkategori", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmkategori)
            Me.columnjmljual = New System.Data.DataColumn("jmljual", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmljual)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtoptenRow() As toptenRow
            Return CType(Me.NewRow,toptenRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New toptenRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(toptenRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.toptenRowChangedEvent) Is Nothing) Then
                RaiseEvent toptenRowChanged(Me, New toptenRowChangeEvent(CType(e.Row,toptenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.toptenRowChangingEvent) Is Nothing) Then
                RaiseEvent toptenRowChanging(Me, New toptenRowChangeEvent(CType(e.Row,toptenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.toptenRowDeletedEvent) Is Nothing) Then
                RaiseEvent toptenRowDeleted(Me, New toptenRowChangeEvent(CType(e.Row,toptenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.toptenRowDeletingEvent) Is Nothing) Then
                RaiseEvent toptenRowDeleting(Me, New toptenRowChangeEvent(CType(e.Row,toptenRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetoptenRow(ByVal row As toptenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "toptenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class jurnalumumDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnobukti As System.Data.DataColumn
        
        Private columnkdrek As System.Data.DataColumn
        
        Private columntglbukti As System.Data.DataColumn
        
        Private columnjumlah As System.Data.DataColumn
        
        Private columnposisi As System.Data.DataColumn
        
        Private columnnmrek As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "jurnalumum"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nobuktiColumn() As System.Data.DataColumn
            Get
                Return Me.columnnobukti
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property kdrekColumn() As System.Data.DataColumn
            Get
                Return Me.columnkdrek
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglbuktiColumn() As System.Data.DataColumn
            Get
                Return Me.columntglbukti
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jumlahColumn() As System.Data.DataColumn
            Get
                Return Me.columnjumlah
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property posisiColumn() As System.Data.DataColumn
            Get
                Return Me.columnposisi
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmrekColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmrek
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As jurnalumumRow
            Get
                Return CType(Me.Rows(index),jurnalumumRow)
            End Get
        End Property
        
        Public Event jurnalumumRowChanging As jurnalumumRowChangeEventHandler
        
        Public Event jurnalumumRowChanged As jurnalumumRowChangeEventHandler
        
        Public Event jurnalumumRowDeleting As jurnalumumRowChangeEventHandler
        
        Public Event jurnalumumRowDeleted As jurnalumumRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddjurnalumumRow(ByVal row As jurnalumumRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddjurnalumumRow(ByVal nobukti As String, ByVal kdrek As String, ByVal tglbukti As Date, ByVal jumlah As Double, ByVal posisi As String, ByVal nmrek As String) As jurnalumumRow
            Dim rowjurnalumumRow As jurnalumumRow = CType(Me.NewRow,jurnalumumRow)
            rowjurnalumumRow.ItemArray = New Object() {nobukti, kdrek, tglbukti, jumlah, posisi, nmrek}
            Me.Rows.Add(rowjurnalumumRow)
            Return rowjurnalumumRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As jurnalumumDataTable = CType(MyBase.Clone,jurnalumumDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New jurnalumumDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnobukti = MyBase.Columns("nobukti")
            Me.columnkdrek = MyBase.Columns("kdrek")
            Me.columntglbukti = MyBase.Columns("tglbukti")
            Me.columnjumlah = MyBase.Columns("jumlah")
            Me.columnposisi = MyBase.Columns("posisi")
            Me.columnnmrek = MyBase.Columns("nmrek")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnobukti = New System.Data.DataColumn("nobukti", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnobukti)
            Me.columnkdrek = New System.Data.DataColumn("kdrek", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkdrek)
            Me.columntglbukti = New System.Data.DataColumn("tglbukti", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglbukti)
            Me.columnjumlah = New System.Data.DataColumn("jumlah", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjumlah)
            Me.columnposisi = New System.Data.DataColumn("posisi", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnposisi)
            Me.columnnmrek = New System.Data.DataColumn("nmrek", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmrek)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewjurnalumumRow() As jurnalumumRow
            Return CType(Me.NewRow,jurnalumumRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New jurnalumumRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(jurnalumumRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.jurnalumumRowChangedEvent) Is Nothing) Then
                RaiseEvent jurnalumumRowChanged(Me, New jurnalumumRowChangeEvent(CType(e.Row,jurnalumumRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.jurnalumumRowChangingEvent) Is Nothing) Then
                RaiseEvent jurnalumumRowChanging(Me, New jurnalumumRowChangeEvent(CType(e.Row,jurnalumumRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.jurnalumumRowDeletedEvent) Is Nothing) Then
                RaiseEvent jurnalumumRowDeleted(Me, New jurnalumumRowChangeEvent(CType(e.Row,jurnalumumRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.jurnalumumRowDeletingEvent) Is Nothing) Then
                RaiseEvent jurnalumumRowDeleting(Me, New jurnalumumRowChangeEvent(CType(e.Row,jurnalumumRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovejurnalumumRow(ByVal row As jurnalumumRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "jurnalumumDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class notakontanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnonk As System.Data.DataColumn
        
        Private columntglnk As System.Data.DataColumn
        
        Private columnnmbrg As System.Data.DataColumn
        
        Private columnhrgbeli As System.Data.DataColumn
        
        Private columnjmlbeli As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "notakontan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nonkColumn() As System.Data.DataColumn
            Get
                Return Me.columnnonk
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tglnkColumn() As System.Data.DataColumn
            Get
                Return Me.columntglnk
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nmbrgColumn() As System.Data.DataColumn
            Get
                Return Me.columnnmbrg
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property hrgbeliColumn() As System.Data.DataColumn
            Get
                Return Me.columnhrgbeli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property jmlbeliColumn() As System.Data.DataColumn
            Get
                Return Me.columnjmlbeli
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As notakontanRow
            Get
                Return CType(Me.Rows(index),notakontanRow)
            End Get
        End Property
        
        Public Event notakontanRowChanging As notakontanRowChangeEventHandler
        
        Public Event notakontanRowChanged As notakontanRowChangeEventHandler
        
        Public Event notakontanRowDeleting As notakontanRowChangeEventHandler
        
        Public Event notakontanRowDeleted As notakontanRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddnotakontanRow(ByVal row As notakontanRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddnotakontanRow(ByVal nonk As String, ByVal tglnk As Date, ByVal nmbrg As String, ByVal hrgbeli As Integer, ByVal jmlbeli As Integer) As notakontanRow
            Dim rownotakontanRow As notakontanRow = CType(Me.NewRow,notakontanRow)
            rownotakontanRow.ItemArray = New Object() {nonk, tglnk, nmbrg, hrgbeli, jmlbeli}
            Me.Rows.Add(rownotakontanRow)
            Return rownotakontanRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As notakontanDataTable = CType(MyBase.Clone,notakontanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New notakontanDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnonk = MyBase.Columns("nonk")
            Me.columntglnk = MyBase.Columns("tglnk")
            Me.columnnmbrg = MyBase.Columns("nmbrg")
            Me.columnhrgbeli = MyBase.Columns("hrgbeli")
            Me.columnjmlbeli = MyBase.Columns("jmlbeli")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnonk = New System.Data.DataColumn("nonk", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnonk)
            Me.columntglnk = New System.Data.DataColumn("tglnk", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntglnk)
            Me.columnnmbrg = New System.Data.DataColumn("nmbrg", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnmbrg)
            Me.columnhrgbeli = New System.Data.DataColumn("hrgbeli", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhrgbeli)
            Me.columnjmlbeli = New System.Data.DataColumn("jmlbeli", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnjmlbeli)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewnotakontanRow() As notakontanRow
            Return CType(Me.NewRow,notakontanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New notakontanRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(notakontanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.notakontanRowChangedEvent) Is Nothing) Then
                RaiseEvent notakontanRowChanged(Me, New notakontanRowChangeEvent(CType(e.Row,notakontanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.notakontanRowChangingEvent) Is Nothing) Then
                RaiseEvent notakontanRowChanging(Me, New notakontanRowChangeEvent(CType(e.Row,notakontanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.notakontanRowDeletedEvent) Is Nothing) Then
                RaiseEvent notakontanRowDeleted(Me, New notakontanRowChangeEvent(CType(e.Row,notakontanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.notakontanRowDeletingEvent) Is Nothing) Then
                RaiseEvent notakontanRowDeleting(Me, New notakontanRowChangeEvent(CType(e.Row,notakontanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovenotakontanRow(ByVal row As notakontanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsPenjualan = New dsPenjualan
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "notakontanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class fakturRow
        Inherits System.Data.DataRow
        
        Private tablefaktur As fakturDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablefaktur = CType(Me.Table,fakturDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nofaktur() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.nofakturColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nofaktur' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.nofakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglfaktur() As Date
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.tglfakturColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglfaktur' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.tglfakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosp() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.nospColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosp' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.nospColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsp() As Date
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.tglspColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsp' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.tglspColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alamat() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.alamatColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'alamat' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.alamatColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hrgpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.hrgpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'hrgpsn' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.hrgpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablefaktur.jmlpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlpsn' in table 'faktur' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefaktur.jmlpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnofakturNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.nofakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnofakturNull()
            Me(Me.tablefaktur.nofakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglfakturNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.tglfakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglfakturNull()
            Me(Me.tablefaktur.tglfakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnospNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.nospColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnospNull()
            Me(Me.tablefaktur.nospColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglspNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.tglspColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglspNull()
            Me(Me.tablefaktur.tglspColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablefaktur.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalamatNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.alamatColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalamatNull()
            Me(Me.tablefaktur.alamatColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablefaktur.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshrgpsnNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.hrgpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethrgpsnNull()
            Me(Me.tablefaktur.hrgpsnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlpsnNull() As Boolean
            Return Me.IsNull(Me.tablefaktur.jmlpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlpsnNull()
            Me(Me.tablefaktur.jmlpsnColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sjRow
        Inherits System.Data.DataRow
        
        Private tablesj As sjDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesj = CType(Me.Table,sjDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosj() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nosjColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosj' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nosjColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsj() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesj.tglsjColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsj' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.tglsjColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nopol() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nopolColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nopol' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nopolColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nofaktur() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nofakturColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nofaktur' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nofakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglfaktur() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesj.tglfakturColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglfaktur' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.tglfakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nospColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosp' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nospColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsp() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesj.tglspColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsp' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.tglspColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alamat() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.alamatColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'alamat' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.alamatColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telp() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.telpColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'telp' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.telpColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlkirim() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesj.jmlkirimColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlkirim' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.jmlkirimColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property keterangan() As String
            Get
                Try 
                    Return CType(Me(Me.tablesj.keteranganColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'keterangan' in table 'sj' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesj.keteranganColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnosjNull() As Boolean
            Return Me.IsNull(Me.tablesj.nosjColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnosjNull()
            Me(Me.tablesj.nosjColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglsjNull() As Boolean
            Return Me.IsNull(Me.tablesj.tglsjColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglsjNull()
            Me(Me.tablesj.tglsjColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnopolNull() As Boolean
            Return Me.IsNull(Me.tablesj.nopolColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnopolNull()
            Me(Me.tablesj.nopolColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnofakturNull() As Boolean
            Return Me.IsNull(Me.tablesj.nofakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnofakturNull()
            Me(Me.tablesj.nofakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglfakturNull() As Boolean
            Return Me.IsNull(Me.tablesj.tglfakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglfakturNull()
            Me(Me.tablesj.tglfakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnospNull() As Boolean
            Return Me.IsNull(Me.tablesj.nospColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnospNull()
            Me(Me.tablesj.nospColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglspNull() As Boolean
            Return Me.IsNull(Me.tablesj.tglspColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglspNull()
            Me(Me.tablesj.tglspColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablesj.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablesj.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalamatNull() As Boolean
            Return Me.IsNull(Me.tablesj.alamatColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalamatNull()
            Me(Me.tablesj.alamatColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelpNull() As Boolean
            Return Me.IsNull(Me.tablesj.telpColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelpNull()
            Me(Me.tablesj.telpColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablesj.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablesj.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlkirimNull() As Boolean
            Return Me.IsNull(Me.tablesj.jmlkirimColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlkirimNull()
            Me(Me.tablesj.jmlkirimColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsketeranganNull() As Boolean
            Return Me.IsNull(Me.tablesj.keteranganColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetketeranganNull()
            Me(Me.tablesj.keteranganColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class kwitansiRow
        Inherits System.Data.DataRow
        
        Private tablekwitansi As kwitansiDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablekwitansi = CType(Me.Table,kwitansiDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nokwt() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.nokwtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nokwt' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.nokwtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglkwt() As Date
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.tglkwtColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglkwt' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.tglkwtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nofaktur() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.nofakturColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nofaktur' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.nofakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglfaktur() As Date
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.tglfakturColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglfaktur' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.tglfakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosp() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.nospColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosp' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.nospColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsp() As Date
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.tglspColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsp' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.tglspColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alamat() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.alamatColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'alamat' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.alamatColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hrgpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.hrgpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'hrgpsn' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.hrgpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablekwitansi.jmlpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlpsn' in table 'kwitansi' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablekwitansi.jmlpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnokwtNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.nokwtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnokwtNull()
            Me(Me.tablekwitansi.nokwtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglkwtNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.tglkwtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglkwtNull()
            Me(Me.tablekwitansi.tglkwtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnofakturNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.nofakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnofakturNull()
            Me(Me.tablekwitansi.nofakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglfakturNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.tglfakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglfakturNull()
            Me(Me.tablekwitansi.tglfakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnospNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.nospColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnospNull()
            Me(Me.tablekwitansi.nospColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglspNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.tglspColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglspNull()
            Me(Me.tablekwitansi.tglspColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablekwitansi.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalamatNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.alamatColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalamatNull()
            Me(Me.tablekwitansi.alamatColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablekwitansi.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshrgpsnNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.hrgpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethrgpsnNull()
            Me(Me.tablekwitansi.hrgpsnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlpsnNull() As Boolean
            Return Me.IsNull(Me.tablekwitansi.jmlpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlpsnNull()
            Me(Me.tablekwitansi.jmlpsnColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class penjualanpesanRow
        Inherits System.Data.DataRow
        
        Private tablepenjualanpesan As penjualanpesanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepenjualanpesan = CType(Me.Table,penjualanpesanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosp() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.nospColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosp' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.nospColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsp() As Date
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.tglspColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsp' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.tglspColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hrgpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.hrgpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'hrgpsn' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.hrgpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlpsn() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepenjualanpesan.jmlpsnColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlpsn' in table 'penjualanpesan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepenjualanpesan.jmlpsnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnospNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.nospColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnospNull()
            Me(Me.tablepenjualanpesan.nospColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglspNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.tglspColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglspNull()
            Me(Me.tablepenjualanpesan.tglspColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablepenjualanpesan.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablepenjualanpesan.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshrgpsnNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.hrgpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethrgpsnNull()
            Me(Me.tablepenjualanpesan.hrgpsnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlpsnNull() As Boolean
            Return Me.IsNull(Me.tablepenjualanpesan.jmlpsnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlpsnNull()
            Me(Me.tablepenjualanpesan.jmlpsnColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pelangganRow
        Inherits System.Data.DataRow
        
        Private tablepelanggan As pelangganDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepelanggan = CType(Me.Table,pelangganDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kdplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepelanggan.kdplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kdplg' in table 'pelanggan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepelanggan.kdplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepelanggan.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'pelanggan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepelanggan.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property alamat() As String
            Get
                Try 
                    Return CType(Me(Me.tablepelanggan.alamatColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'alamat' in table 'pelanggan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepelanggan.alamatColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telp() As String
            Get
                Try 
                    Return CType(Me(Me.tablepelanggan.telpColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'telp' in table 'pelanggan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepelanggan.telpColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskdplgNull() As Boolean
            Return Me.IsNull(Me.tablepelanggan.kdplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkdplgNull()
            Me(Me.tablepelanggan.kdplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablepelanggan.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablepelanggan.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsalamatNull() As Boolean
            Return Me.IsNull(Me.tablepelanggan.alamatColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetalamatNull()
            Me(Me.tablepelanggan.alamatColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelpNull() As Boolean
            Return Me.IsNull(Me.tablepelanggan.telpColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelpNull()
            Me(Me.tablepelanggan.telpColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class barangRow
        Inherits System.Data.DataRow
        
        Private tablebarang As barangDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebarang = CType(Me.Table,barangDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kdbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablebarang.kdbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kdbrg' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.kdbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablebarang.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satuan() As String
            Get
                Try 
                    Return CType(Me(Me.tablebarang.satuanColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'satuan' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.satuanColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property harga() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebarang.hargaColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'harga' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.hargaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stok() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablebarang.stokColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'stok' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.stokColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kdsub() As String
            Get
                Try 
                    Return CType(Me(Me.tablebarang.kdsubColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kdsub' in table 'barang' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebarang.kdsubColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskdbrgNull() As Boolean
            Return Me.IsNull(Me.tablebarang.kdbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkdbrgNull()
            Me(Me.tablebarang.kdbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablebarang.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablebarang.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssatuanNull() As Boolean
            Return Me.IsNull(Me.tablebarang.satuanColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsatuanNull()
            Me(Me.tablebarang.satuanColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshargaNull() As Boolean
            Return Me.IsNull(Me.tablebarang.hargaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethargaNull()
            Me(Me.tablebarang.hargaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstokNull() As Boolean
            Return Me.IsNull(Me.tablebarang.stokColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstokNull()
            Me(Me.tablebarang.stokColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskdsubNull() As Boolean
            Return Me.IsNull(Me.tablebarang.kdsubColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkdsubNull()
            Me(Me.tablebarang.kdsubColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pengirimanRow
        Inherits System.Data.DataRow
        
        Private tablepengiriman As pengirimanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepengiriman = CType(Me.Table,pengirimanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosj() As String
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.nosjColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosj' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.nosjColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsj() As Date
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.tglsjColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsj' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.tglsjColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nofaktur() As String
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.nofakturColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nofaktur' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.nofakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglfaktur() As Date
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.tglfakturColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglfaktur' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.tglfakturColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nosp() As String
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.nospColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nosp' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.nospColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglsp() As Date
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.tglspColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglsp' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.tglspColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmplg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.nmplgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmplg' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.nmplgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlkirim() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepengiriman.jmlkirimColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlkirim' in table 'pengiriman' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepengiriman.jmlkirimColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnosjNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.nosjColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnosjNull()
            Me(Me.tablepengiriman.nosjColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglsjNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.tglsjColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglsjNull()
            Me(Me.tablepengiriman.tglsjColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnofakturNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.nofakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnofakturNull()
            Me(Me.tablepengiriman.nofakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglfakturNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.tglfakturColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglfakturNull()
            Me(Me.tablepengiriman.tglfakturColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnospNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.nospColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnospNull()
            Me(Me.tablepengiriman.nospColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglspNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.tglspColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglspNull()
            Me(Me.tablepengiriman.tglspColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmplgNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.nmplgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmplgNull()
            Me(Me.tablepengiriman.nmplgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablepengiriman.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlkirimNull() As Boolean
            Return Me.IsNull(Me.tablepengiriman.jmlkirimColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlkirimNull()
            Me(Me.tablepengiriman.jmlkirimColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class toptenRow
        Inherits System.Data.DataRow
        
        Private tabletopten As toptenDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletopten = CType(Me.Table,toptenDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kdbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tabletopten.kdbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kdbrg' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.kdbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tabletopten.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property satuan() As String
            Get
                Try 
                    Return CType(Me(Me.tabletopten.satuanColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'satuan' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.satuanColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmsub() As String
            Get
                Try 
                    Return CType(Me(Me.tabletopten.nmsubColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmsub' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.nmsubColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmkategori() As String
            Get
                Try 
                    Return CType(Me(Me.tabletopten.nmkategoriColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmkategori' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.nmkategoriColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmljual() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletopten.jmljualColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmljual' in table 'topten' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletopten.jmljualColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskdbrgNull() As Boolean
            Return Me.IsNull(Me.tabletopten.kdbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkdbrgNull()
            Me(Me.tabletopten.kdbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tabletopten.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tabletopten.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssatuanNull() As Boolean
            Return Me.IsNull(Me.tabletopten.satuanColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsatuanNull()
            Me(Me.tabletopten.satuanColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmsubNull() As Boolean
            Return Me.IsNull(Me.tabletopten.nmsubColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmsubNull()
            Me(Me.tabletopten.nmsubColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmkategoriNull() As Boolean
            Return Me.IsNull(Me.tabletopten.nmkategoriColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmkategoriNull()
            Me(Me.tabletopten.nmkategoriColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmljualNull() As Boolean
            Return Me.IsNull(Me.tabletopten.jmljualColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmljualNull()
            Me(Me.tabletopten.jmljualColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class jurnalumumRow
        Inherits System.Data.DataRow
        
        Private tablejurnalumum As jurnalumumDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablejurnalumum = CType(Me.Table,jurnalumumDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nobukti() As String
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.nobuktiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nobukti' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.nobuktiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property kdrek() As String
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.kdrekColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'kdrek' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.kdrekColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglbukti() As Date
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.tglbuktiColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglbukti' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.tglbuktiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jumlah() As Double
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.jumlahColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jumlah' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.jumlahColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property posisi() As String
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.posisiColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'posisi' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.posisiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmrek() As String
            Get
                Try 
                    Return CType(Me(Me.tablejurnalumum.nmrekColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmrek' in table 'jurnalumum' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablejurnalumum.nmrekColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnobuktiNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.nobuktiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnobuktiNull()
            Me(Me.tablejurnalumum.nobuktiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IskdrekNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.kdrekColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetkdrekNull()
            Me(Me.tablejurnalumum.kdrekColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglbuktiNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.tglbuktiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglbuktiNull()
            Me(Me.tablejurnalumum.tglbuktiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjumlahNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.jumlahColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjumlahNull()
            Me(Me.tablejurnalumum.jumlahColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsposisiNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.posisiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetposisiNull()
            Me(Me.tablejurnalumum.posisiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmrekNull() As Boolean
            Return Me.IsNull(Me.tablejurnalumum.nmrekColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmrekNull()
            Me(Me.tablejurnalumum.nmrekColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class notakontanRow
        Inherits System.Data.DataRow
        
        Private tablenotakontan As notakontanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenotakontan = CType(Me.Table,notakontanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nonk() As String
            Get
                Try 
                    Return CType(Me(Me.tablenotakontan.nonkColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nonk' in table 'notakontan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenotakontan.nonkColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tglnk() As Date
            Get
                Try 
                    Return CType(Me(Me.tablenotakontan.tglnkColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tglnk' in table 'notakontan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenotakontan.tglnkColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nmbrg() As String
            Get
                Try 
                    Return CType(Me(Me.tablenotakontan.nmbrgColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'nmbrg' in table 'notakontan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenotakontan.nmbrgColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property hrgbeli() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablenotakontan.hrgbeliColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'hrgbeli' in table 'notakontan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenotakontan.hrgbeliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property jmlbeli() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablenotakontan.jmlbeliColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'jmlbeli' in table 'notakontan' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablenotakontan.jmlbeliColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnonkNull() As Boolean
            Return Me.IsNull(Me.tablenotakontan.nonkColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnonkNull()
            Me(Me.tablenotakontan.nonkColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstglnkNull() As Boolean
            Return Me.IsNull(Me.tablenotakontan.tglnkColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettglnkNull()
            Me(Me.tablenotakontan.tglnkColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnmbrgNull() As Boolean
            Return Me.IsNull(Me.tablenotakontan.nmbrgColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnmbrgNull()
            Me(Me.tablenotakontan.nmbrgColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IshrgbeliNull() As Boolean
            Return Me.IsNull(Me.tablenotakontan.hrgbeliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SethrgbeliNull()
            Me(Me.tablenotakontan.hrgbeliColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsjmlbeliNull() As Boolean
            Return Me.IsNull(Me.tablenotakontan.jmlbeliColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetjmlbeliNull()
            Me(Me.tablenotakontan.jmlbeliColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class fakturRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As fakturRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As fakturRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As fakturRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sjRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As sjRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sjRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sjRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class kwitansiRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As kwitansiRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As kwitansiRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As kwitansiRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class penjualanpesanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As penjualanpesanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As penjualanpesanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As penjualanpesanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pelangganRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pelangganRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pelangganRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pelangganRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class barangRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As barangRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As barangRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As barangRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pengirimanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pengirimanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pengirimanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pengirimanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class toptenRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As toptenRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As toptenRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As toptenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class jurnalumumRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As jurnalumumRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As jurnalumumRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As jurnalumumRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class notakontanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As notakontanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As notakontanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As notakontanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
